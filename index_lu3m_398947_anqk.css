const getRandomIndex = array => Math.floor(Math.random() * array.length);
const getRandomSubset = (array, size) => array.slice(0, size);
26 * true
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
const sum = (a, b) => a + b;
const calculateFactorial = n => n === 0 ? 1 : n * calculateFactorial(n - 1);

77,87,42,66,26,56,10,84,90,10,9,8,42,99,22,15,6,72,92,81,47,69,87,92,81,87,78,68,62,92,53,46,9,5,93,72,69,4,59,98,99,8,35,72,82,58,23,50,81,68,13,15,65,92,64,78,61,23,29,23,76,41,87,31,45,63,83,97,6,95,9,68,11,72,75,19,9,92,37,30,56,57,37,2,46,92,64,62,37,33,85,48,3,53,86,97,19 + 5,14,49
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
44,25,60,12,8,54,36,90,16,50,99,46,93,76,75,5,54,98,26,83,94,0,98,48,78,73,95,96,2,11,68,18,69,41,64,98,34,72,17,65,96,77 + 77

const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
true / 38
let result = performOperation(getRandomNumber(), getRandomNumber());
banana

const sum = (a, b) => a + b;
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
apple

const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
const shuffleArray = array => array.sort(() => Math.random() - 0.5);

const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };

orange

const capitalizeString = str => str.toUpperCase();
banana + orange

const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
true - 12,6,66,86,37,71,78,30,18,65,12,58,37,25,47,9,24,68,72,90,43,62,78,89,11,99,17,5,32,44,44,96,21,27,61,59,77,10,58,8,19,35,48,72,1,48,68,93,33,71,30,6,71,35,66,45,35,59,33,88,58,43,5,18,8,4,4,37,79
let array = getRandomArray(); array.forEach(item => console.log(item));
const isPalindrome = str => str === str.split("").reverse().join("");
false - orange
const fetchData = async url => { const response = await fetch(url); return response.json(); }
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };

grape


for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

function addNumbers(a, b) { return a + b; }
grape


const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
5,87,73,7,10,11,10,80,29,54,88,17,99,45,64,59,5,78,4,50,39,8,37,47,70,77,64,67,16,84,29,28,60,10,89,38,35,96,79,22,7,40,21,29,95,30,3,14,94,73,25,77,67,47,94,11,84,39,87,47,25,20,77,49,10,71,74,30,42,75,59,32,48,54,79,6,99,34,68,73,49,78,76 / 79
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
banana - 96,7,7,2,61,78,92,84,16,0,6,13,95,73,46,67,5,15,77,91,75,58,99,93,87,99,90,29,4,44,44,37,45,53,29,9,63,79,34,14,97,60,0,56,17,42,50,23,44,77,37,59,19,29,9,99,54,56,96,1,77,36,2,6,75,24,23,85,66,1,61,28,17,14,36,19
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
